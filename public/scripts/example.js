// tutorial21.js
var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat(comment);
    this.setState({
      data: newComments
    });
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({
          data: comments
        });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {
      data: []
    };
  },
  componentDidMount: function() {
    this.loadCommentsFromServer()
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});


// tutorial10.js
var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id} time={comment.time}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

// tutorial17.js
var CommentForm = React.createClass({
  getInitialState: function() {
    return {
      author: '',
      text: '',
      authorEmpty: true,
      textEmpty: true
    };
  },
  handleAuthorChange: function(e) {
    this.setState({
      author: e.target.value,
      authorEmpty: e.target.value == "" ? true : false
    });
  },
  handleTextChange: function(e) {
    this.setState({
      text: e.target.value,
      textEmpty: e.target.value == "" ? true : false
    });
  },
  handleSubmit: function(e) {
    e.preventDefault(); //prevent
    var author = this.state.author.trim(); //remove the spaces
    var text = this.state.text.trim();
    var dateNow = new Date();
    var dateYMD = new Array(0)
    dateYMD.push(dateNow.getFullYear(), dateNow.getMonth() + 1, dateNow.getDate());
    var weekday = new Array(7)
    weekday[0] = "Sunday"
    weekday[1] = "Monday"
    weekday[2] = "Tuesday"
    weekday[3] = "Wednesday"
    weekday[4] = "Thursday"
    weekday[5] = "Friday"
    var time = dateYMD.join('-') + " " + dateNowDate().toLocaleTimeString() + " " + weekday[dateNow.getDay()];
    if (!text || !author) {
      return;
    }
    // TODO: send request to the server
    this.props.onCommentSubmit({
      author: author,
      text: text,
      time: time
    });
    this.setState({
      author: '',
      text: '',
      time: '',
      authorEmpty: true,
      textEmpty: true
    });
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
          className = "yourName"
        />
        <textarea
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
          className="commentContent"
        />
        <input type="submit" value="submit" className={!this.state.authorEmpty && !this.state.textEmpty ? "submitButton" : "submitButton hide"} />
      </form>
    );
  }
});
// tutorial7.js
var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return {
      __html: rawMarkup
    };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
        <p className="commentTime">{this.props.time}</p>
      </div>
    );
  }
});

class ClockDemo extends React.Component {
  constructor() {
    super()
    this.state = {
      date: {}
    }
  }
  componentWillMount() {
    var func = function() {
      this.setState({
        date: new Date()
      })
    }.bind(this)
    func()
    setInterval(func, 1000)
  }
  render() {
    var date = this.state.date
    var minutes = date.getMinutes()
    var seconds = date.getSeconds()

    var hour = (date.getHours()) % 12 * (360 / 12) + (360 / 12) * (minutes / 60)
    var minute = minutes * (360 / 60) + (360 / 60) * (seconds / 60)
    var second = seconds * (360 / 60)
    return (
      <div className="style">
        <img className="backgroundImg" src="http://www.imagebon.com/postpic/2015/11/clock-face_104541.jpg" />
        
        <div className="container">
          <div className="clockMinuteLine" style={{transform: 'rotateZ('+ minute +'deg)'}}></div>
          <div className="clockHourLine" style={{transform:  'rotateZ('+ hour +'deg)'}}></div>
          <div className="clockSecondLine" style={{transform: 'rotateZ('+ second +'deg)'}}></div>
        </div>
       
      </div>
    )
  }
}

ReactDOM.render(<ClockDemo />,
  document.getElementById('clock')
);

ReactDOM.render(
  <CommentBox url="/api/comments" />,
  document.getElementById('content')
);


var ProductCategoryRow = React.createClass({
  render: function() {
    return (<tr><th colSpan="2">{this.props.category}</th></tr>);
  }
});

var ProductRow = React.createClass({
  render: function() {
    return (
      <tr>
        <td>
          <span className={this.props.product.stocked ? "" :"unstocked"} >
            {this.props.product.name}
          </span>
        </td>
        <td>
          <span className={this.props.product.stocked ? "" :"unstocked"} >
            {this.props.product.price}
          </span>
        </td>
      </tr>
    );
  }
});

var ProductTable = React.createClass({
  loadProducts: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {
      data: []
    }
  },

  componentDidMount: function() {
    this.loadProducts()
  },

  render: function() {
    var rows = [];
    var lastCategory = null;
    this.state.data.forEach(function(product) {
      if (product.name.indexOf(this.props.filterText) === -1 || (!product.stocked && this.props.inStockOnly) || (product.stocked && this.props.notStockOnly)) {
        return;
      }
      if (this.props.selectedCategory == product.category || this.props.selectedCategory == 'All' || !this.props.selectedCategory) {
        if (product.category !== lastCategory) {
          rows.push(<ProductCategoryRow category={product.category} key={product.category} />);
        }
        rows.push(<ProductRow product={product} key={product.name} />);
        lastCategory = product.category;
      }
    }.bind(this));
    return (
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Price</th>
          </tr>
        </thead>
        <tbody>{rows}</tbody>
      </table>
    );
  }
});

var SearchBar = React.createClass({
  handleChange: function() {
    this.props.onUserInput(
      this.refs.filterTextInput.value,
      this.refs.inStockOnlyInput.checked,
      this.refs.notStockOnlyInput.checked
    );
  },
  render: function() {
    return (
      <form>
        <input
          type="text"
          placeholder="Search..."
          value={this.props.filterText}
          ref="filterTextInput"
          onChange={this.handleChange}
          className="SearchBar"
        />
        <p className="inStockOnly">
          <input
            type="checkbox"
            checked={this.props.inStockOnly}
            ref="inStockOnlyInput"
            onChange={this.handleChange}
          />
          Hide products in not stock
        </p>
        <p className="notStockOnly">
          <input
            type="checkbox"
            checked={this.props.notStockOnly}
            ref="notStockOnlyInput"
            onChange={this.handleChange}
          />
          Hide products in stock
        </p>
      </form>
    );
  }
});

var CategorySelect = React.createClass({
  handleChange: function() {
    var opt = this.refs.selected.options[this.refs.selected.selectedIndex];
    this.props.onUserSelect(
      opt.value
    );
  },
  render: function() {
    return (
      <select ref="selected" onChange={this.handleChange}>
        <option>All</option>
        <option>Sporting Goods</option>
        <option>Electronics</option>
      </select>
    );
  }
});

var FilterableProductTable = React.createClass({

  getInitialState: function() {
    return {
      filterText: '',
      inStockOnly: false,
      notStockOnly: false,
      selectedCategory: ''
    };
  },

  handleUserInput: function(filterText, inStockOnly, notStockOnly) {
    this.setState({
      filterText: filterText,
      inStockOnly: inStockOnly,
      notStockOnly: notStockOnly
    });
  },

  handleUserSelect: function(selectedCategory) {
    this.setState({
      selectedCategory: selectedCategory
    });
  },

  render: function() {
    return (
      <div>
        <SearchBar
          filterText={this.state.filterText}
          inStockOnly={this.state.inStockOnly}
          notStockOnly={this.state.notStockOnly}
          onUserInput={this.handleUserInput}
        />
        <CategorySelect
         selectedCategory={this.state.selectedCategory} 
         onUserSelect={this.handleUserSelect}
        />
        <ProductTable
          url="products.json" 
          filterText={this.state.filterText}
          inStockOnly={this.state.inStockOnly}
          notStockOnly={this.state.notStockOnly}
          selectedCategory = {this.state.selectedCategory}
        />
      </div>
    );
  }
});

ReactDOM.render(
  <FilterableProductTable />,
  document.getElementById('container')
);

var LikeButton = React.createClass({
  getInitialState: function() {
    return {
      liked: true,
      clicked: false,
      count: 0,
      count2: 0
    };
  },
  handleClick: function() {
    if (this.state.clicked) {
      if (this.state.liked) {
        alert("You have liked!");
      } else {
        alert("You haven't liked!");
      }
      return;
    }
    this.setState({
      clicked: true,
      liked: true,
      count: this.state.count += 1
    });
  },
  handleClick2: function() {
    if (this.state.clicked) {
      if (this.state.liked) {
        alert("You have liked!");
      } else {
        alert("You haven't liked!");
      }
      return;
    }
    this.setState({
      clicked: true,
      liked: false,
      count2: this.state.count2 += 1
    });
  },
  render: function() {
    var text = this.state.liked ? 'liked' : 'haven\'t liked';
    return (
      <div>
        <p className="likeContent">
          You {text} this.
        </p>
        <span className="like" onClick={this.handleClick}>{this.state.count}</span>
        <span className="unlike" onClick={this.handleClick2}>{this.state.count2}</span>
      </div>
    );
  }
});

ReactDOM.render(
  <LikeButton />,
  document.getElementById('likeOrNot')
);

var Info = React.createClass({
  loadInfo: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {
      data: []
    }
  },
  handleChange: function(e) {
    var dataBackUp = this.state.data;
    this.state.data.forEach(function(info) {
      if (e.id === info.id) {
        info.clicked = true;
        console.log(info);
        console.log(this.state.data)
      }
    }.bind(this));
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      success: function(data) {
        this.setState({
          data: this.state.data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({
          data: dataBackUp
        });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  componentDidMount: function() {
    this.loadInfo()
  },
  render: function() {
    var rows = [];
    this.state.data.forEach(function(info) {
      rows.push(<InfoLi clickSubmit={this.handleChange} key={info.id} id={info.id} content={info.content} cliked={info.clicked} />)
    }.bind(this));
    return (
      <ol>
        {rows}
      </ol>
    );
  }
});

var InfoLi = React.createClass({
  getInitialState: function() {
    return {
      "id": this.props.id
    }
  },
  handleClick: function() {
    this.props.clickSubmit({
      "id": this.props.id
    })
  },
  render: function() {
    return (
      <li onClick={this.handleClick} className={this.props.clicked ? "clicked" : ""}>{this.props.content}</li>
    );
  }
});

ReactDOM.render(
  <Info url="/api/info" />,
  document.getElementById('info')
);